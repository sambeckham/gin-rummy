$primary-font   : 'Judson', serif;;
// $secondary-font : georgia, serif;
$font-weight : normal !default;
$line-height : 1.4 !default;
$browser-default : 16 !default;
$font-base : 14;
$font-size : ( $font-base / $browser-default ) * 100; // Converts the font size in to a percentage value

// Borrowed from Typeplate (http://typeplate.com)
$measure: $font-base * $line-height;

// Modular Scale Values
// http://typecast.com/blog/contrast-through-scale
$tera: 6.5 !default; // 117 = 18 × 6.5
$giga: 5 !default; // 90 = 18 × 5
$mega: 4 !default; // 72 = 18 × 4
$alpha: 3.3333 !default; // 60 = 18 × 3.3333
$beta: 2.6667 !default; // 48 = 18 × 2.6667
$gamma: 2 !default; // 36 = 18 × 2
$delta: 1.3333 !default; // 24 = 18 × 1.3333
$epsilon: 1.1667 !default; // 21 = 18 × 1.1667
$zeta: 1 !default; // 18 = 18 × 1

$type-scale-unit-value: rem !default;

// $Function $Context Calculator
// -------------------------------------//
// divide a given font-size by base font-size & return a relative value

@function context-calc($scale, $base, $value) {
    @return ($scale/$base)#{$value};
}

// $Function $Measure-Margin
// -------------------------------------//
// divide 1 unit of measure by given font-size & return a relative em value

@function measure-margin($scale, $measure, $value) {
    @return ( $measure / ( $scale * $font-base ) )#{$value};
}

// $Mixin $Type-Scale
// -------------------------------------//
// provides a pixel fallback if you decide
// to use 'rems' as a unit over ems.

@mixin type-scale($scale, $base, $value, $measure:"") {
    // If 'rem' is used as a $value then provide a px fallback.
    @if $value == rem {
        font-size: $scale * $font-base#{px};
    }
    font-size: $scale#{$value};
    @if $measure != "" {
        margin-bottom: measure-margin($scale, $measure, $value);
        .user-content &{
            margin-top: measure-margin($scale, $measure, $value);
            margin-bottom: measure-margin($scale*2, $measure, $value);
        }
    }
}

// styles for all headings, in the style of @csswizardry
%hN {
    text-rendering: optimizeLegibility; // voodoo to enable ligatures and kerning
    line-height: 1; // this fixes huge spaces when a heading wraps onto two lines
    margin-top: 0;
    font-weight: bold;
}

// Multi-dimensional array, where:
// the first value is the name of the class
// and the second value is the variable for the size
$sizes: tera $tera, giga $giga, mega $mega, alpha $alpha, beta $beta, gamma $gamma, delta $delta, epsilon $epsilon, zeta $zeta;

// Sass loop to associate h1-h6 tags with their appropriate greek
// heading based on a modular scale.
// for each size in the scale, create a class
@each $size in $sizes {
    .#{nth($size, 1)} {
        @include type-scale(nth($size, 2), $font-base, '#{$type-scale-unit-value}', $measure);
    }
}

// associate h1-h6 tags with their appropriate greek heading
h1 {
    @extend .gamma;
    @extend %hN;
}

h2 {
    @extend .delta;
    @extend %hN;
}

h3 {
    @extend .epsilon;
    @extend %hN;
}

h4 {
    @extend .epsilon;
    @extend %hN;
}

h5 {
    @extend .zeta;
    @extend %hN;
}

h6 {
    @extend .zeta;
    @extend %hN;
}